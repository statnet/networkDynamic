useDynLib(networkDynamic, .registration = TRUE)

import(statnet.common, network)

export(
networkDynamic,
print.networkDynamic,
as.data.frame.networkDynamic,
is.networkDynamic,
as.networkDynamic,
as.network.networkDynamic,
as.networkDynamic.networkDynamic,
as.networkDynamic.network,
read.son,
"%t%",
network.extract,
"%k%",
network.collapse,
get.networks,
network.dynamic.check,
activate.edges,
activate.vertices,
add.edges.active,
add.vertices.active,       
deactivate.edges,
deactivate.vertices,
delete.edge.activity,
delete.vertex.activity,       
get.change.times,
get.edgeIDs.active,
get.edges.active,
get.neighborhood.active,
get.edge.activity,       
get.vertex.activity,       
is.active,
is.adjacent.active,
network.dyadcount.active,
network.edgecount.active,
network.naedgecount.active,
network.size.active,
activate.network.attribute,
get.network.attribute.active,
activate.vertex.attribute,
get.vertex.attribute.active,
activate.edge.attribute,
activate.edge.value,
get.edge.attribute.active,
deactivate.edge.attribute,
deactivate.vertex.attribute,
deactivate.network.attribute,
list.vertex.attributes.active,
list.edge.attributes.active,
list.network.attributes.active,
get.edge.value.active,
spells.overlap,
spells.hit,
search.spell,
get.vertex.id,
vertex.pid.check,
get.vertex.pid,
initialize.pids,
get.edge.id,
get.edge.pid,
edge.pid.check,
add.vertices.networkDynamic,
add.edges.networkDynamic,
add.edge.networkDynamic,
reconcile.vertex.activity,
reconcile.edge.activity,
adjust.activity,
get.dyads.active,
when.vertex.attrs.match,
when.edge.attrs.match,
edges.age.at,
dyads.age.at,
vertices.age.at,
et.initialize,
et.copy,
et.print,
et.add.edges,
et.delete.edges,
et.find.ith.edge,
et.is.directed,
et.network.size,
et.info,
et.get.neighborhood,
et.to.edgelist,
et.get.eid
#when.next.edge.change
)

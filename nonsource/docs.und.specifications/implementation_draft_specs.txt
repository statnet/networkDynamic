Lets use this file to record notes about the package, questions, and stuff we decide while working on it. 



Assuming we use b above, when we have a series of exactly adjacent spells with the same values, should they be merged into a single spell to save space?  Always? Never? Add a compression method for post processing cleanup?

Proposal: network.optimize method that can be called after network construction to reduce things to optimal form. 

NetworkDynamic Methods that need to be modified when we include TEA:


Problem: asking for a crosssection aggregating over an interval (both onset and termination time included) means that we need to specify how any possibly conflicting TEAs should be aggregated, and we need to be able to pass this through the network.extract call.  Maybe use the rule argument?

Proposal: Its really hard, and for most examples we just need the momentary crosssection, so just implement just the momentary version and throw errors for the cases where aggregation is required. 

What should happen to dynamic attributes in the network returned by network.extract?
Proposal: they should be made non-dynamic with the appropriate values. Con: possible colision with non-dynamic vars of the same name.

network.dynamic.check
Proposal: extend check spell matrix ordering and integrity for attributes, and that attributes are not active when attached nodes and edges are inactive. 

New utility methods.





as.network.dynamic.tel()  convert timed edge list to dynamic network, in the future extend to include attributes
as.network.dynamic.panel()  take a list of networks assumed to be panel observations and make a dynamic network object.  Assume separate panels, don't link sequential intervals. Maybe provide option to link intervals in the future?
as.network.dynamic.toggles() take an initial network and lists of changes list 

1) Do we need an activate.edge(x,head,tail,onset,term) method, or activate.edge should create edge by default if the edge does not exist.

Yes, add "add.edge"=TRUE argument, that will give warning if false and edge is missing. 

2) What if you want as.data.frame(nD) to return a spell matrix for the vertices?

output.type="edgeSpellList"


3) How to specify additional arguments for network construction (bipartite, etc) when calling converter functions? Pass in an empty network object to define the node set? (i.e. what if there are isolates in the network you are loading in via edge list?)a

as.network.dynamic.data.frame(x, base.network=NULL,node.spells=NULL)

base.network="a network to fill with edges" 


4) Making argument and object label terminology consistent (onset vs. start)

make everything onset, terminus when refering to spells

5) Object (or at least consistent argument names for defining the set of arguments needed to convert a nD object to discrete time (or indicating values of discrete time model used to construct nD) e.g. start, end, interval, duration, rule

ndtv is using 
start :: when to start the slicing, default to min observed in network
end :: when to stop the slicing, default to max observed. 
interval :: where / how far apart to take the slices  interval=NULL: every wave (if discrete case) every change (if continuous), interval=value:  every value-th time point, interval=c(1,2,3): at times 1,2,3
aggregate.dur :: duration (thickness) of time slice  NULL : onset = termination
aggregate.rule = how to handle merging of edge weights and attributes (magic, not yet implemented)

At sunbelt discusion decision was made to add network attribute "obs.spells" a spell matrix variable which include spells that define the time points at which the network was actually observed. 

6) Behavior of  network.extract  (should it return an nD or network object?)  vs.  networkCollapse?   Should networkCollapse aggregate values and properties? Should networkCrossection be a instant version?

networkExtract() returns nD, optional arugment to censor/trim times to requested range
networkCollapse(nd, onset, terminus)  aggregate edge weights and attribute appropriately

avoid defaults, make people be explict.   pass in named list of functions where the names of the list are the names of the dynamic attributes.   But how to we pass in the arguments to the functions?

%t%  returns a network at specific time point. 


7) Default behavior for handling discrete time (we agreed on unit interval, but people are using "at" syntax for discrete time, which to me seems like default conversion should be instant.

Outcome of discussion was: keep it unit , start from [0,1) for the first network.   Add argument "times"=1  If constant, use as interval, if a vector, assume that gives durations between each network. 
mode=("events","intervals")
onsets=NULL (1 to length of netwoks)
lengths=1


8) I think our spec for implementation of TEA is fairly clear, but any new considerations or extensions?

9) Do we want to create another ndUtils package for useful stuff so that we don't end up piling too much non-core stuff into networkDynamic? If so, what name shall we know it by?   

Conclusion of discussion was: not yet. 


10) Additional spell inclusion rules. Currently we support "any" and "all".  Ayn has a good argument that we may want a "majority" (active 50% or more) rule, Skye would like an "all-or-ending" rule that includes spells ending within the query spell or continuing throughout but excludes those starting within.  The purpose of the rule is to prevent double-counting of elements spanning sequential query spells caused by "any" rule.  Ayn also proposes allowing passing in an arbitrary function.  Concerns about performance and complexity.  

11) "optimizeSpells" ("joinSpells") function  that can be called after network construction link up exactly adjacent activity spells to give a parsimonious temporal representation.

Yes

12) "getChangeTimes(nD,vertex.activity=TRUE,edge.activity=TRUE,vertex.attributes=FALSE,edge.attributes=FALSE,network.attributes=FALSE)"  return a time-ordered list of all the unique time points at which something changes in the network. 


13)  Should we reserve a "design" attribute to networkDynamic that will be used to specify the observation system for the network?

Yes, plan for it, but don't try to spec it yet because we don't know how it will work. 

14) Need utility methods for assembeling a sequentially-indexed node set from a set of consistant alphanumeric node and edge ids.


15) Question: When the results of a discrete simulation are converted to a nD object, how should ties that exist at the beginning of the simulation and/or are still active at the end be represented?  Current behavior: -Inf, Inf respectively. 
Cons: A bit wierd, since they weren't actually observed to Inf. 
Pros: Possible to distinguish ties that end at the last time point from censored ties. 
Proposal:  change conversion of toggle list to not extend things out to Inf when converting. Much debate, no firm conclusion. 


16) Do we have a defined ordering for ids when network.extract remaps node indexes?  

17) as.network.dynamic.list  should have an argument to specify what network attribute will be used to define the persistant network id, especially when building from a list of networks of differeing sizes. 


DATA SETS
It will be really helpful to have some example data sets with dynamic elements and attributes to use for testing and docs. Proposals:

Botswana networkDynamic objects generated by Nicole (500 to 10k nodes, 1000 times steps) with somewhat realistic generated attributes.

Faux High Dynamic ("Glee")   dynamic version of Faux high, changing friendships, made up attributes, nodes enter and exit, sing musical numbers.  Create by randomly perturb start and end dates to make it dynamic (this will also reduce the density).


Steve examples?  generating something on the fly from STERGM?

Does Mark have examples of missing data that we should include?


Why are networks with 0 vertices prohibited? seems like we need them if all vertices can become inactive
network.initialize(0)
Error in network.initialize(0) : 
  Network objects must have at least one vertex.

Shouldn't network.extract return a network of the same size as the original network, instead of only the active nodes?
Proposal: add a flag to let it do that




